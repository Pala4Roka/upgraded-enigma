1 задание 
import math

# Введите радиус и высоту от пользователя
radius = float(input("Введите радиус основания цилиндра: "))
height = float(input("Введите высоту цилиндра: "))

# Рассчитайте объем цилиндра
volume = math.pi * (radius ** 2) * height

# Отобразить результат
print(f"Объем цилиндра равен {volume:.2f} кубические единицы")

2 задание
# Определите известную скорость, с которой кошки поедают мышей
cats_per_hour = 1.5 / 1.5  # Полторы кошки за полтора часа


num_cats = int(input("Число кошек: "))
num_hours = float(input("Количество часов: "))


num_mice_eaten = cats_per_hour * num_cats * num_hours


print(f"{num_cats} кошек {num_mice_eaten:.2f} мыши за {num_hours} часов.")

3 задание

#Определите диапазон значений ASCII (например, от 32 до 127 для печатных символов).



2 задача
start_ascii = 32
end_ascii = 127

# Выполнить итерацию по диапазону и отобразить символы и их значения в формате ASCII
for ascii_value in range(start_ascii, end_ascii + 1):
    character = chr(ascii_value)
    print(f"Char: {character}, ASCII число: {ascii_value}")

5 задание


base1 = float(input("Enter the length of the first base: "))
base2 = float(input("Enter the length of the second base: "))
height = float(input("Enter the height of the trapezoid: "))


area = 0.5 * (base1 + base2) * height


print(f"Площадь трапеции равна {area:.2f}")

1 задача 
import datetime


current_datetime = datetime.datetime.now()


print("Current Date and Time:", current_datetime)


increased_year = current_datetime.year + 1

increased_date = current_datetime + datetime.timedelta(days=2)


print("Increased Date and Time:", increased_date.replace(year=increased_year))
2 задача 
import math

class GeometricShape:
    def volume(self):
        pass

    def surface_area(self):
        pass

class Cube(GeometricShape):
    def __init__(self, side_length):
        self.side_length = side_length

    def volume(self):
        return self.side_length ** 3

    def surface_area(self):
        return 6 * (self.side_length ** 2)

class Cylinder(GeometricShape):
    def __init__(self, radius, height):
        self.radius = radius
        self.height = height

    def volume(self):
        return math.pi * (self.radius ** 2) * self.height

    def surface_area(self):
        return (2 * math.pi * self.radius * self.height) + (2 * math.pi * (self.radius ** 2))

class Tetrahedron(GeometricShape):
    def __init__(self, edge_length):
        self.edge_length = edge_length

    def volume(self):
        return (math.sqrt(2) / 12) * (self.edge_length ** 3)

    def surface_area(self):
        return math.sqrt(3) * (self.edge_length ** 2)

def print_menu():
    print("1. Куб")
    print("2. Цилиедр")
    print("3. Тетра")

def get_user_choice():
    choice = input("Выбери (1-3): ")
    while choice not in ['1', '2', '3']:
        choice = input("Не то,дргое (1-3): ")
    return int(choice)

def get_dimensions(shape_name):
    if shape_name == "Куб":
        side_length = float(input(": "))
        return side_length
    elif shape_name == "Цилиндр":
        radius = float(input(": "))
        height = float(input(": "))
        return radius, height
    elif shape_name == "Тетра":
        edge_length = float(input(": "))
        return edge_length

def main():
    print_menu()
    choice = get_user_choice()

    if choice == 1:
        shape = Cube(get_dimensions("Куб"))
    elif choice == 2:
        shape = Cylinder(*get_dimensions("Цилиндр"))
    elif choice == 3:
        shape = Tetrahedron(get_dimensions("Тетра"))

    print("Обём:", shape.volume())
    print("Плозадь поверхнсти:", shape.surface_area())

if __name__ == "__main__":
    main()

3 задание


class Employee:
    def init(self, full_name, position, company):
        self.full_name = full_name
        self.position = position
        self.company = company

class Company:
    def init(self, name):
        self.name = name
        self.employees = []

    def add_employee(self, employee):
        self.employees.append(employee)

    def remove_employee(self, employee):
        self.employees.remove(employee)

    def count_employees(self):
        return len(self.employees)

companies = {}

while True:
    print("\nОпции:")
    print("1. Добавить сотрудника")
    print("2. Удолить сотрудника")
    print("3. Сисок сотрудников")
    print("4. Список компании с подсчётом сотрудников")
    print("5. Выйти")

    choice = input("Введите: ")

    if choice == "1":
        full_name = input("Полное Ф.И.О сотрудника: ")
        position = input("Его позиция: ")
        company_name = input("Имя компании: ")

        if company_name not in companies:
            companies[company_name] = Company(company_name)

        employee = Employee(full_name, position, companies[company_name])
        companies[company_name].add_employee(employee)

    elif choice == "2":
        full_name = input("Введите полное Ф.И.О сотрудника для того чтобы удалить его из списка: ")
        for company in companies.values():
            for employee in company.employees:
                if employee.full_name == full_name:
                    company.remove_employee(employee)
                    break

    elif choice == "3":
        for company in companies.values():
            for employee in company.employees:
                print(f"Ф.И.О : {employee.full_name}, Позиция: {employee.position}, Компания: {company.name}")

    elif choice == "4":
        for company in companies.values():
            print(f"Компания: {company.name}, Счёт сотруднков: {company.count_employees()}")

    elif choice == "5":
        break

    else:
        print("Невернное действие.Пожалуйста попробуйте снова.")
4 лаба 
1)

database = {}


unique_id = 1

def add_record():
    global unique_id
    full_name = input("ФИО: ")
    gender = input("Пол: ")
    age = input("Возраст: ")
    company_id = input("ID компании: ")

    
    database[unique_id] = {
        "ФИО": full_name,
        "Пол": gender,
        "Возраст": age,
        "ID компании": company_id
    }
    unique_id += 1
    print("Записть добавлена успешно.")

def list_records():
    print("\nЗаписанные в бд записи:")
    for record_id, record in database.items():
        print(f"ID: {record_id}, ФИО: {record['ФИО']}, Пол: {record['Пол']}, Возраст: {record['Возраст']},  ID компании: {record['ID компании']}")

while True:
    print("\nОпции:")
    print("1. Добавить запись")
    print("2. Список записи")
    print("3. Выход")

    choice = input("Ваш выбор: ")

    if choice == "1":
        add_record()
    elif choice == "2":
        list_records()
    elif choice == "3":
        break
    else:
        print("Неверный выбор, повторите ещё раз.")




database = []

def add_record():
    title = input("Заголовок: ")
    abstract_content = input("Текст статьи: ")
    author_id = input("ID Автора: ")
    menu_id = input("ID Меню : ")


    record = {
        "ID": len(database) + 1,
        "Заголовок": title,
        "Текст статьи": abstract_content,
        "ID Автора": author_id,
        "ID Меню": menu_id
    }
    
    database.append(record)
    print("Запись внесена успешно.")

def list_records():
    print("\nЗаписи в базе данных:")
    for record in database:
        print(f"ID: {record['ID']}, Заголовок: {record['Заголовок']}, ID Автора: {record['ID Автора']}, ID Меню: {record['ID Меню']}")

def list_authors_with_article_count():
    author_count = {}
    for record in database:
        author_id = record["ID Автора"]
        author_count[author_id] = author_count.get(author_id, 0) + 1

    print("\nАвторы более чем с 2 записями:")
    for author_id, count in author_count.items():
        if count > 2:
            print(f"ID Автора: {author_id}, Число записей: {count}")

while True:
    print("\nОпции:")
    print("1. Добавить запись")
    print("2. Список записей")
    print("3. Список с авторами с более 2 статьями")
    print("4. Выход")

    choice = input("Ваш выбор: ")

    if choice == "1":
        add_record()
    elif choice == "2":
        list_records()
    elif choice == "3":
        list_authors_with_article_count()
    elif choice == "4":
        break
    else:
        print("неверный выбор, попробуйте ещё раз.")
