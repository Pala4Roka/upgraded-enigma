1 задание 
import math

# Введите радиус и высоту от пользователя
radius = float(input("Введите радиус основания цилиндра: "))
height = float(input("Введите высоту цилиндра: "))

# Рассчитайте объем цилиндра
volume = math.pi * (radius ** 2) * height

# Отобразить результат
print(f"Объем цилиндра равен {volume:.2f} кубические единицы")

2 задание
# Определите известную скорость, с которой кошки поедают мышей
cats_per_hour = 1.5 / 1.5  # Полторы кошки за полтора часа


num_cats = int(input("Число кошек: "))
num_hours = float(input("Количество часов: "))


num_mice_eaten = cats_per_hour * num_cats * num_hours


print(f"{num_cats} кошек {num_mice_eaten:.2f} мыши за {num_hours} часов.")

3 задание

#Определите диапазон значений ASCII (например, от 32 до 127 для печатных символов).



2 задача
start_ascii = 32
end_ascii = 127

# Выполнить итерацию по диапазону и отобразить символы и их значения в формате ASCII
for ascii_value in range(start_ascii, end_ascii + 1):
    character = chr(ascii_value)
    print(f"Char: {character}, ASCII число: {ascii_value}")

5 задание


base1 = float(input("Enter the length of the first base: "))
base2 = float(input("Enter the length of the second base: "))
height = float(input("Enter the height of the trapezoid: "))


area = 0.5 * (base1 + base2) * height


print(f"Площадь трапеции равна {area:.2f}")

1 задача 
import datetime


current_datetime = datetime.datetime.now()


print("Current Date and Time:", current_datetime)


increased_year = current_datetime.year + 1

increased_date = current_datetime + datetime.timedelta(days=2)


print("Increased Date and Time:", increased_date.replace(year=increased_year))
2 задача 
import math

class GeometricShape:
    def volume(self):
        pass

    def surface_area(self):
        pass

class Cube(GeometricShape):
    def __init__(self, side_length):
        self.side_length = side_length

    def volume(self):
        return self.side_length ** 3

    def surface_area(self):
        return 6 * (self.side_length ** 2)

class Cylinder(GeometricShape):
    def __init__(self, radius, height):
        self.radius = radius
        self.height = height

    def volume(self):
        return math.pi * (self.radius ** 2) * self.height

    def surface_area(self):
        return (2 * math.pi * self.radius * self.height) + (2 * math.pi * (self.radius ** 2))

class Tetrahedron(GeometricShape):
    def __init__(self, edge_length):
        self.edge_length = edge_length

    def volume(self):
        return (math.sqrt(2) / 12) * (self.edge_length ** 3)

    def surface_area(self):
        return math.sqrt(3) * (self.edge_length ** 2)

def print_menu():
    print("1. Куб")
    print("2. Цилиедр")
    print("3. Тетра")

def get_user_choice():
    choice = input("Выбери (1-3): ")
    while choice not in ['1', '2', '3']:
        choice = input("Не то,дргое (1-3): ")
    return int(choice)

def get_dimensions(shape_name):
    if shape_name == "Куб":
        side_length = float(input(": "))
        return side_length
    elif shape_name == "Цилиндр":
        radius = float(input(": "))
        height = float(input(": "))
        return radius, height
    elif shape_name == "Тетра":
        edge_length = float(input(": "))
        return edge_length

def main():
    print_menu()
    choice = get_user_choice()

    if choice == 1:
        shape = Cube(get_dimensions("Куб"))
    elif choice == 2:
        shape = Cylinder(*get_dimensions("Цилиндр"))
    elif choice == 3:
        shape = Tetrahedron(get_dimensions("Тетра"))

    print("Обём:", shape.volume())
    print("Плозадь поверхнсти:", shape.surface_area())

if __name__ == "__main__":
    main()

3 задание


class Employee:
    def init(self, full_name, position, company):
        self.full_name = full_name
        self.position = position
        self.company = company

class Company:
    def init(self, name):
        self.name = name
        self.employees = []

    def add_employee(self, employee):
        self.employees.append(employee)

    def remove_employee(self, employee):
        self.employees.remove(employee)

    def count_employees(self):
        return len(self.employees)

companies = {}

while True:
    print("\nОпции:")
    print("1. Добавить сотрудника")
    print("2. Удолить сотрудника")
    print("3. Сисок сотрудников")
    print("4. Список компании с подсчётом сотрудников")
    print("5. Выйти")

    choice = input("Введите: ")

    if choice == "1":
        full_name = input("Полное Ф.И.О сотрудника: ")
        position = input("Его позиция: ")
        company_name = input("Имя компании: ")

        if company_name not in companies:
            companies[company_name] = Company(company_name)

        employee = Employee(full_name, position, companies[company_name])
        companies[company_name].add_employee(employee)

    elif choice == "2":
        full_name = input("Введите полное Ф.И.О сотрудника для того чтобы удалить его из списка: ")
        for company in companies.values():
            for employee in company.employees:
                if employee.full_name == full_name:
                    company.remove_employee(employee)
                    break

    elif choice == "3":
        for company in companies.values():
            for employee in company.employees:
                print(f"Ф.И.О : {employee.full_name}, Позиция: {employee.position}, Компания: {company.name}")

    elif choice == "4":
        for company in companies.values():
            print(f"Компания: {company.name}, Счёт сотруднков: {company.count_employees()}")

    elif choice == "5":
        break

    else:
        print("Невернное действие.Пожалуйста попробуйте снова.")
4 лаба 
1)

database = {}


unique_id = 1

def add_record():
    global unique_id
    full_name = input("ФИО: ")
    gender = input("Пол: ")
    age = input("Возраст: ")
    company_id = input("ID компании: ")

    
    database[unique_id] = {
        "ФИО": full_name,
        "Пол": gender,
        "Возраст": age,
        "ID компании": company_id
    }
    unique_id += 1
    print("Записть добавлена успешно.")

def list_records():
    print("\nЗаписанные в бд записи:")
    for record_id, record in database.items():
        print(f"ID: {record_id}, ФИО: {record['ФИО']}, Пол: {record['Пол']}, Возраст: {record['Возраст']},  ID компании: {record['ID компании']}")

while True:
    print("\nОпции:")
    print("1. Добавить запись")
    print("2. Список записи")
    print("3. Выход")

    choice = input("Ваш выбор: ")

    if choice == "1":
        add_record()
    elif choice == "2":
        list_records()
    elif choice == "3":
        break
    else:
        print("Неверный выбор, повторите ещё раз.")




database = []

def add_record():
    title = input("Заголовок: ")
    abstract_content = input("Текст статьи: ")
    author_id = input("ID Автора: ")
    menu_id = input("ID Меню : ")


    record = {
        "ID": len(database) + 1,
        "Заголовок": title,
        "Текст статьи": abstract_content,
        "ID Автора": author_id,
        "ID Меню": menu_id
    }
    
    database.append(record)
    print("Запись внесена успешно.")

def list_records():
    print("\nЗаписи в базе данных:")
    for record in database:
        print(f"ID: {record['ID']}, Заголовок: {record['Заголовок']}, ID Автора: {record['ID Автора']}, ID Меню: {record['ID Меню']}")

def list_authors_with_article_count():
    author_count = {}
    for record in database:
        author_id = record["ID Автора"]
        author_count[author_id] = author_count.get(author_id, 0) + 1

    print("\nАвторы более чем с 2 записями:")
    for author_id, count in author_count.items():
        if count > 2:
            print(f"ID Автора: {author_id}, Число записей: {count}")

while True:
    print("\nОпции:")
    print("1. Добавить запись")
    print("2. Список записей")
    print("3. Список с авторами с более 2 статьями")
    print("4. Выход")

    choice = input("Ваш выбор: ")

    if choice == "1":
        add_record()
    elif choice == "2":
        list_records()
    elif choice == "3":
        list_authors_with_article_count()
    elif choice == "4":
        break
    else:
        print("неверный выбор, попробуйте ещё раз.")



5 лаба

def calculate_function_values(a, b, c, d, f, x_values):
    y_values = [a * x**4 + b * x**3 + c * x**2 + d * x + f for x in x_values]
    return y_values

def draw_graph(a, b, c, d, f, x_range, num_points):
    x_min, x_max = x_range
    step = (x_max - x_min) / (num_points - 1)
    x_values = [x_min + i * step for i in range(num_points)]
    y_values = calculate_function_values(a, b, c, d, f, x_values)

    y_min, y_max = min(y_values), max(y_values)

    for row in range(30, 0, -1):
        y = y_min + row * (y_max - y_min) / 30
        line = ""
        for x in x_values:
            if abs(y - calculate_function_values(a, b, c, d, f, [x])[0]) < 0.025:
                line += "o"
            else:
                line += " "
        print(line)

def main():
    a = float(input("Значение'a': "))
    b = float(input("Значение'b': "))
    c = float(input("Значение'c': "))
    d = float(input("Значение'd': "))
    f = float(input("Значение'f': "))

    x_min = float(input(" Минимум для  x-axis range: "))
    x_max = float(input("Максимум x-axis range: "))

    num_points = int(input("Введите количество точек для построения графика: "))

    draw_graph(a, b, c, d, f, (x_min, x_max), num_points)

if __name__ == "__main__":
    main()



6 kf,f



import random
import time

def get_input_vector():
    while True:
        try:
            n = int(input("Введите количество элементов в векторе: "))
            break
        except ValueError:
            print("Неверный ввод. Пожалуйста, введите целое число.")

    vector = []
    for _ in range(n):
        value = random.randint(1, 1000)  
        vector.append(value)

    return vector

def generate_random_vector(n, unique=False):
    if unique:
        return random.sample(range(1, 100), n)
    else:
        return [random.randint(1, 100) for _ in range(n)]

def display_vectors(original, sorted_lib, sorted_custom, compare_count):
    print("Оригинальный вектор:", original[:compare_count])
    print("Отсортированный вектор (библиотека):", sorted_lib[:compare_count])
    print("Отсортированный вектор (пользовательский):", sorted_custom[:compare_count])

def custom_sort(vector):
    return sorted(vector)

def main():
    choice = input("Выберите опцию:\n1. Введите вектор с клавиатуры\n2. Сгенерируйте случайный вектор\n3. Сгенерировать случайный вектор с уникальными значениями\n")

    if choice == '1':
        original_vector = get_input_vector()
    elif choice == '2':
        n = int(input("Введите количество элементов в векторе: "))
        original_vector = generate_random_vector(n)
    elif choice == '3':
        n = int(input("Введите количество элементов в векторе: "))
        original_vector = generate_random_vector(n, unique=True)
    else:
        print("Неверный выбор. Пожалуйста, введите '1','2'или'3'время сортировки библиотеки в секундах.")
        return

    compare_count = 10 if len(original_vector) < 10 else min(10, len(original_vector))

    
    start_time_lib = time.time()
    sorted_lib = sorted(original_vector)
    end_time_lib = time.time()

    start_time_custom = time.time()
    sorted_custom = custom_sort(original_vector)
    end_time_custom = time.time()

    display_vectors(original_vector, sorted_lib, sorted_custom, compare_count)

    print("время сортировки библиотеки:", end_time_lib - start_time_lib, "в секундах")
    print("Время для пользовательской сортировки:", end_time_custom - start_time_custom, " секунды")

if __name__ == "__main__":
    main()



import pygame
import threading
import random
import time


pygame.init()


WIDTH, HEIGHT = 800, 400
ARRAY_SIZE = 100
ARRAY_HEIGHT = HEIGHT - 20
BAR_WIDTH = WIDTH // ARRAY_SIZE
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
SLEEP_TIME = 0.01 


class SortingThread(threading.Thread):
    def __init__(self, arr):
        super().__init__()
        self.arr = arr
        self.sorted = False

    def run(self):
        self.sort()
        self.sorted = True

    def sort(self):
        pass


class InsertionSortThread(SortingThread):
    def sort(self):
        for i in range(1, len(self.arr)):
            key = self.arr[i]
            j = i - 1
            while j >= 0 and key < self.arr[j]:
                self.arr[j + 1] = self.arr[j]
                j -= 1
            self.arr[j + 1] = key


class QuickSortThread(SortingThread):
    def sort(self):
        def partition(arr, low, high):
            i = low - 1
            pivot = arr[high]
            for j in range(low, high):
                if arr[j] <= pivot:
                    i += 1
                    arr[i], arr[j] = arr[j], arr[i]
            arr[i + 1], arr[high] = arr[high], arr[i + 1]
            return i + 1

        def quick_sort(arr, low, high):
            if low < high:
                pi = partition(arr, low, high)
                quick_sort(arr, low, pi - 1)
                quick_sort(arr, pi + 1, high)

        quick_sort(self.arr, 0, len(self.arr) - 1)


class BubbleSortThread(SortingThread):
    def sort(self):
        n = len(self.arr)
        for i in range(n):
            for j in range(0, n - i - 1):
                if self.arr[j] > self.arr[j + 1]:
                    self.arr[j], self.arr[j + 1] = self.arr[j + 1], self.arr[j]


data = [random.randint(1, ARRAY_HEIGHT) for _ in range(ARRAY_SIZE)]
original_data = data.copy()


screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Multithreaded Sorting")


insertion_thread = InsertionSortThread(data.copy())
quick_sort_thread = QuickSortThread(data.copy())
bubble_sort_thread = BubbleSortThread(data.copy())


insertion_thread.start()
quick_sort_thread.start()
bubble_sort_thread.start()

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False


    screen.fill(WHITE)

    for i, value in enumerate(original_data):
        pygame.draw.rect(screen, BLACK, (i * BAR_WIDTH, HEIGHT - value, BAR_WIDTH, value))

    if insertion_thread.sorted:
        for i, value in enumerate(insertion_thread.arr):
            pygame.draw.rect(screen, RED, (i * BAR_WIDTH, HEIGHT - value, BAR_WIDTH, value))
    if quick_sort_thread.sorted:
        for i, value in enumerate(quick_sort_thread.arr):
            pygame.draw.rect(screen, BLACK, (i * BAR_WIDTH, HEIGHT - value, BAR_WIDTH, value))
    if bubble_sort_thread.sorted:
        for i, value in enumerate(bubble_sort_thread.arr):
            pygame.draw.rect(screen, BLACK, (i * BAR_WIDTH, HEIGHT - value, BAR_WIDTH, value))

    pygame.display.flip()


    insertion_thread._target = insertion_thread.sort
    quick_sort_thread._target = quick_sort_thread.sort
    bubble_sort_thread._target = bubble_sort_thread.sort
    time.sleep(SLEEP_TIME

pygame.quit()
import numpy as np
import matplotlib.pyplot as plt

def calculate_function_values(a, b, c, d, f, x_range):
    x = np.linspace(x_range[0], x_range[1], num=1000)  # Adjust 'num' for the number of points
    y = a * x**4 + b * x**3 + c * x**2 + d * x + f
    return x, y

def plot_graph(x, y, color, linestyle, linewidth):
    plt.plot(x, y, color=color, linestyle=linestyle, linewidth=linewidth)

def main():
    a = float(input("Enter the 'a' coefficient: "))
    b = float(input("Enter the 'b' coefficient: "))
    c = float(input("Enter the 'c' coefficient: "))
    d = float(input("Enter the 'd' coefficient: "))
    f = float(input("Enter the 'f' coefficient: "))

    x_range = [float(input("Enter the starting x value: ")), float(input("Enter the ending x value: ")]
    y_range = [float(input("Enter the starting y value: ")), float(input("Enter the ending y value: ")]

    color = input("Enter the color for the graph line (e.g., 'red', 'blue'): ")
    linestyle = input("Enter the linestyle ('-', '--', '-.', ':'): ")
    linewidth = float(input("Enter the line width: "))

    x, y = calculate_function_values(a, b, c, d, f, x_range)

    plt.figure()
    plt.xlim(x_range)
    plt.ylim(y_range)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('Graph of a Polynomial Function')
    
    plot_graph(x, y, color, linestyle, linewidth)
    
    plt.show()

if __name__ == "__main__":
    main()
